import time
from functools import cached_property
from typing import Any, List

import cv2
import numpy as np


class ThreadedSensorJob:
    def __init__(
        self,
        images: List[np.ndarray],
        frame_id: int,
        frame_time: float,
        discard_threshold: float = 0.1,
        extra_data: Any = None,
    ) -> None:

        self.images = images
        self.frame_id = frame_id
        self.frame_time = frame_time

        self.discard_threshold = discard_threshold

        self.extra_data = extra_data

        # start_time -> when was this image created on the simulation?
        self.start_time: float = 0
        self.end_time: float = 0

    @property
    def cv2_images(self):
        return [cv2.cvtColor(image, cv2.COLOR_RGB2BGR) for image in self.images]

    def start_and_check(self):
        self.local_start_time = time.time()

        if self.local_start_time - self.frame_time > self.discard_threshold:
            return False

        return True

    def end_job(self):
        # collect data for performance analysis
        self.end_time = time.time()

    @cached_property
    def delta(self):
        # total job time since the frame was generated
        return round(self.end_time - self.frame_time, 3)

    @cached_property
    def local_delta(self):
        # total time spent on yolo classification
        return round(self.end_time - self.local_start_time, 3)

    @cached_property
    def fps(self):
        # estimated frames per second generated by yolo
        return round(1 / self.delta, 2)
